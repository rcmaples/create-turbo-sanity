import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport { createTempDir, cleanupTempDir, readJsonFile, verifyProjectStructure } from './utils.js'\n\n// Mock ora for clean test output\nvi.mock('ora', () => ({\n  default: () => ({\n    start: () => ({ succeed: vi.fn(), fail: vi.fn() }),\n    succeed: vi.fn(),\n    fail: vi.fn()\n  })\n}))\n\nconst { createProjectStructure, updateEnvFiles } = await import('../src/template-utils.js')\n\ndescribe('Template Utils', () => {\n  let tempDir\n  let templateDir\n  let projectDir\n  \n  beforeEach(async () => {\n    tempDir = await createTempDir()\n    templateDir = path.join(tempDir, 'template')\n    projectDir = path.join(tempDir, 'project')\n    \n    // Create a minimal template structure\n    await createMockTemplate(templateDir)\n  })\n  \n  afterEach(async () => {\n    await cleanupTempDir(tempDir)\n    vi.restoreAllMocks()\n  })\n\n  describe('createProjectStructure', () => {\n    it('should copy template files to project directory', async () => {\n      // Mock the template directory location\n      const originalJoin = path.join\n      vi.spyOn(path, 'join').mockImplementation((...args) => {\n        if (args.includes('templates') && args.includes('default')) {\n          return templateDir\n        }\n        return originalJoin(...args)\n      })\n      \n      const config = {\n        projectName: 'test-project',\n        displayName: 'Test Project',\n        projectId: 'test123',\n        datasetName: 'production',\n        template: 'default'\n      }\n      \n      await createProjectStructure(projectDir, config)\n      \n      // Verify files were copied\n      expect(await fs.pathExists(path.join(projectDir, 'package.json'))).toBe(true)\n      expect(await fs.pathExists(path.join(projectDir, 'apps', 'web', 'package.json'))).toBe(true)\n      expect(await fs.pathExists(path.join(projectDir, 'apps', 'studio', 'sanity.config.ts'))).toBe(true)\n    })\n\n    it('should replace template placeholders with actual values', async () => {\n      // Mock the template directory location\n      const originalJoin = path.join\n      vi.spyOn(path, 'join').mockImplementation((...args) => {\n        if (args.includes('templates') && args.includes('default')) {\n          return templateDir\n        }\n        return originalJoin(...args)\n      })\n      \n      const config = {\n        projectName: 'my-awesome-project',\n        displayName: 'My Awesome Project',\n        projectId: 'awesome123',\n        datasetName: 'staging',\n        template: 'default'\n      }\n      \n      await createProjectStructure(projectDir, config)\n      \n      // Check that placeholders were replaced in package.json\n      const packageJson = await readJsonFile(path.join(projectDir, 'package.json'))\n      expect(packageJson.name).toBe('my-awesome-project')\n      \n      // Check that placeholders were replaced in sanity.config.ts\n      const sanityConfig = await fs.readFile(path.join(projectDir, 'apps', 'studio', 'sanity.config.ts'), 'utf8')\n      expect(sanityConfig).toContain(\"name: 'my-awesome-project'\")\n      expect(sanityConfig).toContain(\"title: 'My Awesome Project'\")\n    })\n\n    it('should handle missing template directory', async () => {\n      const config = {\n        projectName: 'test-project',\n        displayName: 'Test Project',\n        projectId: 'test123',\n        datasetName: 'production',\n        template: 'nonexistent'\n      }\n      \n      await expect(createProjectStructure(projectDir, config))\n        .rejects.toThrow('Template \"nonexistent\" not found')\n    })\n  })\n\n  describe('updateEnvFiles', () => {\n    beforeEach(async () => {\n      // Create project directory structure\n      await fs.ensureDir(path.join(projectDir, 'apps', 'web'))\n      await fs.ensureDir(path.join(projectDir, 'apps', 'studio'))\n    })\n\n    it('should create environment files with correct values', async () => {\n      await updateEnvFiles(projectDir, 'test-project-id', 'test-dataset')\n      \n      // Check root .env\n      const rootEnv = await fs.readFile(path.join(projectDir, '.env'), 'utf8')\n      expect(rootEnv).toContain('NEXT_PUBLIC_SANITY_PROJECT_ID=test-project-id')\n      expect(rootEnv).toContain('NEXT_PUBLIC_SANITY_DATASET=test-dataset')\n      \n      // Check web .env\n      const webEnv = await fs.readFile(path.join(projectDir, 'apps', 'web', '.env'), 'utf8')\n      expect(webEnv).toContain('NEXT_PUBLIC_SANITY_PROJECT_ID=test-project-id')\n      expect(webEnv).toContain('NEXT_PUBLIC_SANITY_DATASET=test-dataset')\n      \n      // Check studio .env\n      const studioEnv = await fs.readFile(path.join(projectDir, 'apps', 'studio', '.env'), 'utf8')\n      expect(studioEnv).toContain('SANITY_STUDIO_PROJECT_ID=test-project-id')\n      expect(studioEnv).toContain('SANITY_STUDIO_DATASET=test-dataset')\n    })\n\n    it('should handle special characters in project ID and dataset', async () => {\n      await updateEnvFiles(projectDir, 'project-with-dashes', 'dataset_with_underscores')\n      \n      const rootEnv = await fs.readFile(path.join(projectDir, '.env'), 'utf8')\n      expect(rootEnv).toContain('NEXT_PUBLIC_SANITY_PROJECT_ID=project-with-dashes')\n      expect(rootEnv).toContain('NEXT_PUBLIC_SANITY_DATASET=dataset_with_underscores')\n    })\n  })\n})\n\n// Helper function to create a mock template\nasync function createMockTemplate(templateDir) {\n  // Create directory structure\n  await fs.ensureDir(path.join(templateDir, 'apps', 'web'))\n  await fs.ensureDir(path.join(templateDir, 'apps', 'studio'))\n  await fs.ensureDir(path.join(templateDir, 'packages', 'eslint-config'))\n  await fs.ensureDir(path.join(templateDir, 'packages', 'typescript-config'))\n  \n  // Create package.json with placeholders\n  const packageJson = {\n    name: '{{PROJECT_NAME}}',\n    version: '1.0.0',\n    scripts: {\n      dev: 'turbo run dev'\n    }\n  }\n  await fs.writeFile(\n    path.join(templateDir, 'package.json'),\n    JSON.stringify(packageJson, null, 2)\n  )\n  \n  // Create web app package.json\n  const webPackageJson = {\n    name: 'web',\n    version: '0.1.0',\n    dependencies: {\n      next: '^15.0.0'\n    }\n  }\n  await fs.writeFile(\n    path.join(templateDir, 'apps', 'web', 'package.json'),\n    JSON.stringify(webPackageJson, null, 2)\n  )\n  \n  // Create studio package.json\n  const studioPackageJson = {\n    name: 'studio',\n    version: '0.1.0',\n    dependencies: {\n      sanity: '^3.0.0'\n    }\n  }\n  await fs.writeFile(\n    path.join(templateDir, 'apps', 'studio', 'package.json'),\n    JSON.stringify(studioPackageJson, null, 2)\n  )\n  \n  // Create sanity.config.ts with placeholders\n  const sanityConfig = `export default defineConfig({\n  name: '{{PROJECT_NAME}}',\n  title: '{{DISPLAY_NAME}}',\n  projectId: '{{PROJECT_ID}}',\n  dataset: '{{DATASET_NAME}}'\n})`\n  \n  await fs.writeFile(\n    path.join(templateDir, 'apps', 'studio', 'sanity.config.ts'),\n    sanityConfig\n  )\n  \n  // Create shared package configs\n  await fs.writeFile(\n    path.join(templateDir, 'packages', 'eslint-config', 'package.json'),\n    JSON.stringify({ name: '@workspace/eslint-config' }, null, 2)\n  )\n  \n  await fs.writeFile(\n    path.join(templateDir, 'packages', 'typescript-config', 'package.json'),\n    JSON.stringify({ name: '@workspace/typescript-config' }, null, 2)\n  )\n}\n